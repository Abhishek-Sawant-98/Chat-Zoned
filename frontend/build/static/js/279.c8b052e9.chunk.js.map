{"version":3,"file":"static/js/279.c8b052e9.chunk.js","mappings":"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","sources":["components/utils/PasswordVisibilityToggle.jsx","store/storeHooks.ts","utils/appUtils.ts","utils/axios.ts"],"sourcesContent":["import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n\r\nconst PasswordVisibilityToggle = ({\r\n  disableIfLoading,\r\n  showPassword,\r\n  setShowPassword,\r\n}) => {\r\n  return (\r\n    <span\r\n      className={`input-group-text ${disableIfLoading} btn btn-outline-info rounded-pill rounded-start`}\r\n      onClick={() => setShowPassword(!showPassword)}\r\n    >\r\n      {showPassword ? <VisibilityOff /> : <Visibility />}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default PasswordVisibilityToggle;\r\n","import { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TypedUseSelectorHook } from \"react-redux\";\r\nimport type { AppDispatch, RootState } from \"./store\";\r\n\r\n// Exporting reusable typed versions of 'useSelector' and 'useDispatch' hooks\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;","import {\r\n  AxiosConfig,\r\n  AxiosOptions,\r\n  ChatType,\r\n  falsyType,\r\n  UserType,\r\n} from \"./AppTypes\";\r\n\r\n// Convert a normal function to a 'debounced' function\r\nexport const debounce = function (\r\n  func: Function,\r\n  delay: number = 500,\r\n  context: any\r\n) {\r\n  let timer: NodeJS.Timeout;\r\n  return (...args: any[]) => {\r\n    if (timer) clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      func.apply(context, args);\r\n    }, delay);\r\n  };\r\n};\r\n\r\n// Optimization method to cache and retrieve the results\r\n// of pure functions, instead of recalculating again\r\nexport const memoize = function (func: Function) {\r\n  // Each memoized fn has its own separate cache\r\n  const cachedResults: any = {};\r\n\r\n  return (...args: any[]) => {\r\n    // To generate a unique key for each input args array\r\n    const argsKey = JSON.stringify(args);\r\n    // console.log(\r\n    //   cachedResults[argsKey] ? \"Retrieving from cache...\" : \"Calculating...\"\r\n    // );\r\n\r\n    // Retrieve result from cache if present, else calculate\r\n    const result: any = cachedResults[argsKey] || func(...args);\r\n\r\n    // If result isn't saved in cache, save it for later use\r\n    if (!cachedResults[argsKey]) cachedResults[argsKey] = result;\r\n\r\n    return result;\r\n  };\r\n};\r\n\r\n// Truncate a sentence/string\r\nexport const truncateString = memoize(\r\n  (\r\n    str: string | falsyType,\r\n    limit: number | falsyType,\r\n    index: number | falsyType\r\n  ) => {\r\n    if (!str || !limit || !index) return \"\";\r\n    return str.length > limit ? `${str.substring(0, index)}...` : str;\r\n  }\r\n);\r\n\r\n// Truncate each word of a sentence/string\r\nexport const truncateWords = (\r\n  sentence: string | falsyType,\r\n  limit: number | falsyType,\r\n  index: number | falsyType\r\n) => {\r\n  if (!sentence || !limit || !index) return \"\";\r\n  const words = sentence.split(\" \");\r\n  return words\r\n    .map((word) =>\r\n      word.length > limit ? `${word.substring(0, index)}...` : word\r\n    )\r\n    .join(\" \");\r\n};\r\n\r\nexport const getOneToOneChatReceiver = memoize(\r\n  (loggedInUser: UserType, chatUsers: UserType[]) => {\r\n    if (!chatUsers?.length || !loggedInUser) return;\r\n    return loggedInUser._id !== chatUsers[0]?._id ? chatUsers[0] : chatUsers[1];\r\n  }\r\n);\r\n\r\nexport const msgTimeStringOf = memoize((msgDate: Date | falsyType) => {\r\n  if (!msgDate) return \"\";\r\n  let hours = msgDate.getHours();\r\n  let minutes = msgDate.getMinutes();\r\n  const am_or_pm = hours >= 12 ? \" pm\" : \" am\";\r\n  hours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\r\n  return `${hours}:${minutes < 10 ? \"0\" : \"\"}${minutes}${am_or_pm}`;\r\n});\r\n\r\nexport const dateStringOf = memoize((date: Date | falsyType) => {\r\n  return date\r\n    ? `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`\r\n    : \"\";\r\n});\r\n\r\n// Impure function, so can't memoize\r\nexport const msgDateStringOf = (currDate: Date | falsyType) => {\r\n  if (!currDate) return \"\";\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const today = new Date();\r\n  const yesterday = new Date(\r\n    today.setTime(today.getTime() - 24 * 60 * 60 * 1000)\r\n  );\r\n\r\n  return dateStringOf(currDate) === dateStringOf(new Date())\r\n    ? \"Today\"\r\n    : dateStringOf(currDate) === dateStringOf(yesterday)\r\n    ? \"Yesterday\"\r\n    : `${currDate.getDate()} ${\r\n        months[currDate.getMonth()]\r\n      } ${currDate.getFullYear()}`;\r\n};\r\n\r\nexport const parseInnerHTML = (innerHTML: string | falsyType) => {\r\n  return (\r\n    innerHTML\r\n      ?.replaceAll(\"<br>\", \"\")\r\n      .replaceAll(\"&nbsp;\", \" \")\r\n      .replaceAll(\"<div>\", \"\")\r\n      .replaceAll(\"</div>\", \"\")\r\n      .trim() || \"\"\r\n  );\r\n};\r\n\r\nexport const setCaretPosition = (node: HTMLElement) => {\r\n  node?.focus();\r\n  const lastTextNode: ChildNode | null = node?.lastChild;\r\n  if (!lastTextNode) return;\r\n  console.log(\"lastTextNode\", lastTextNode);\r\n  const caret = lastTextNode.textContent?.length || 0;\r\n  const range = document.createRange();\r\n  range.setStart(lastTextNode, caret);\r\n  range.setEnd(lastTextNode, caret);\r\n  const sel: Selection | null = window.getSelection();\r\n  sel?.removeAllRanges();\r\n  sel?.addRange(range);\r\n};\r\n\r\nexport const getAxiosConfig = (options: AxiosOptions | falsyType) => {\r\n  if (!options) return;\r\n  const { loggedInUser, formData, blob } = options;\r\n  const config: AxiosConfig = {\r\n    headers: {\r\n      \"Content-Type\": formData ? \"multipart/form-data\" : \"application/json\",\r\n    },\r\n  };\r\n  if (blob) config.responseType = \"blob\";\r\n  if (loggedInUser)\r\n    config.headers.Authorization = `Bearer ${loggedInUser.token}`;\r\n\r\n  return config;\r\n};\r\n\r\n// In bytes\r\nexport const ONE_KB = 1024;\r\nexport const ONE_MB = 1048576;\r\nexport const TWO_MB = 2097152;\r\nexport const FIVE_MB = 5242880;\r\n\r\nexport const getFileSizeString = memoize((fileSize: number | falsyType) => {\r\n  return !fileSize\r\n    ? \"\"\r\n    : fileSize > ONE_MB\r\n    ? (fileSize / ONE_MB).toFixed(1) + \" MB\"\r\n    : fileSize > ONE_KB\r\n    ? (fileSize / ONE_KB).toFixed(0) + \" KB\"\r\n    : fileSize + \" B\";\r\n});\r\n\r\nexport const isImageFile = memoize((filename: string) =>\r\n  /(\\.png|\\.jpg|\\.jpeg|\\.svg|\\.webp)$/.test(filename)\r\n);\r\n\r\nexport const isImageOrGifFile = memoize((filename: string) =>\r\n  /(\\.png|\\.jpg|\\.jpeg|\\.svg|\\.gif|\\.webp)$/.test(filename)\r\n);\r\n","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: process.env.REACT_APP_SERVER_BASE_URL,\r\n});\r\n"],"names":["disableIfLoading","showPassword","setShowPassword","className","onClick","useAppSelector","useSelector","useAppDispatch","useDispatch","debounce","func","timer","delay","context","args","clearTimeout","setTimeout","apply","memoize","cachedResults","argsKey","JSON","stringify","result","truncateString","str","limit","index","length","substring","truncateWords","sentence","split","map","word","join","getOneToOneChatReceiver","loggedInUser","chatUsers","_id","msgTimeStringOf","msgDate","hours","getHours","minutes","getMinutes","am_or_pm","dateStringOf","date","getDate","getMonth","getFullYear","msgDateStringOf","currDate","today","Date","yesterday","setTime","getTime","parseInnerHTML","innerHTML","replaceAll","trim","setCaretPosition","node","focus","lastTextNode","lastChild","console","log","caret","textContent","range","document","createRange","setStart","setEnd","sel","window","getSelection","removeAllRanges","addRange","getAxiosConfig","options","config","headers","formData","blob","responseType","Authorization","token","ONE_MB","TWO_MB","FIVE_MB","getFileSizeString","fileSize","toFixed","isImageFile","filename","test","isImageOrGifFile","axios","baseURL","process"],"sourceRoot":""}